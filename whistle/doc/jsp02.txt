# jsp day02

JSP 구조

	JSP 는 응답 문서(대부분이 HTML문서)를 만들기 위한 언어의 일종이다.
	
	따라서 HTML 코드가 중심이 되고
	그 중에 필요한 경우에 한해서 자바 코드가 삽입될 수 있다.
	결론적으로 JSP 는 자바적인 요소를 포함할 수 있는 스크립트언어이다.
	
	HTML 과의 차이점
		HTML 은 서버측에서 실행이 불가능하고
		오직 클라이언트(웹 브라우저)에서 실행이 가능한 언어이다.
		==> 오직 미리 준비된 문서를 단순히 응답하는 것일 뿐
			변화를 줄 수는 없다.
			
		JSP 는 서버측에서 실행할 수 있는 언어이다.
		==> 요청이 올 때 마다 서버측에서 실행흘 해서
			요청에 맞는 새로운 HTML 문서를 제작할 수 있다.
			요청이 올 때 마다 내용 변화를 시킬 수 있다.
			
JSP 구조에서 반드시 알아야 할 내용
==> 자바 소스코드를 어떤 방식으로 HTML 문서에 포함시킬 것인가?

======================================================================================

지시자
==> JSP 문서의 특성이나 처리방식을 지시하는 명령을 이야기한다.

	형식 ]
	
		<%@ 명령어 속성="속성값"	속성="속성값" %>
		
		명령어의 종류 ]
		
			page		: 문서 자체의 특성이나 처리방식을 지시하는 명령
			include		: 문서 안에 다른 문서를 포함하도록 지시하는 명령
			taglib		: 사용자가 제작한 태그를 사용할 수 있도록 선언하는 명령
			
	1. page 명령
		==> 현재 작업중인 문서 자체에 특성이나 처리방식을 지시하는 명령
		
			형식 ]
				
				<%@ page 속성="속성값"	속성="속성값" ... %>
				
			참고 ]
				속성	: 지정하고 싶은 특성이나 처리방식에 대한 예약된 단어
				
				속성값	: 속성에 해당하는 특성이나 처리방식에 대한 내용
				
			속성의 종류 ]
				
				*
				language
				==> 스크립트할 언어의 종류를 지정하는 속성
					지금까지는 오직 자바만 허락한 상태
					생략하면 자동으로 자바를 스크립트해준다.
					
					예 ]
						<%@ page language="java" %>
						
				extends
				==> JSP 는 실행을 하면 내부적으로 자바 클래스로 변환되어서
					실행되도록 되어있다.
					즉, 중간단계의 언어로 바뀐 상태에서 실행을 하므로
					ASP, PHP 보다 실행속도가 빠른 장점을 가지고 있다.
					이 때 중간에서 만들어지는 클래스가
					어떤 클래스를 상속받아서 만들어져야 하는지를 지정하는 속성이다.
					
					이미 JSP 문서가 클래스로 변환될 때 HttpJspBase 라는 클래스를
					상속 받도록 약속을 해놓았다.
					자바는 다중상속이 불가능하므로 필요없는 속성이다.
					생략하면 자동으로 HttpJspBase 클래스를 상속받아준다.
					
					예 ]
						<%@ page extends="javax.servlet.jsp.HttpJspBase" %>
					
				*
				import
				==> 스크립트 안에 자바적인 요소를 넣을 수 있는데
					이 때 사용하는 자바적인 요소가 특정 패키지 소속이면
					자바와 동일하게 반드시 import 시켜야 한다.
					그 작업을 해주는 속성이다.
				
					예 ]
					
						<%@ page import="java.util.*, java.io.*" %>
				
				session
				==> 세션의 사용 여부를 판단하도록 하는 속성
					생략하면 세션을 사용하도록 한다. (기본값이 true 이다.)
					
					예 ]
						
						<%@ page session="true" %>
						
					참고 ]
						
						세션 : 사용자의 정보를 서버측에서 관리할 때
								메모리상에서 관리를 하도록 하고 있다.
								서버에서 메모리에서 관리하는 사용자 정보를
								세션이라고 부른다.
								
						쿠키 : 클라이언트 측에서 파일로 기록하는 서버의 정보,
								자신의 활동내역 등을 사용자측의 컴퓨터의
								파일로 저장해서 관리
								이 때 저장된 파일을 쿠키라 부른다.
								
				buffer
				==> 내부적으로 버퍼를 사용할지 여부와
					버퍼의 크기를 얼마로 할지 여부를 지정하는 속성
					생략하면 기본적으로 8KByte 를 버퍼로 사용한다.
					
					예 ]
						
						<%@ page buffer="none" %>
						==> 버퍼를 사용하지 않겠다 라는 의미
						
						<%@ page buffer="16K" %>
						==> 버퍼의 크기를 16KByte 로 지정해서 사용하겠다 라는 의미
						
					참고 ]
						
						버퍼 : 클라이언트에서 서버가 응답을 할 때
								처리속도를 빠르게 하기 위해서
								중간에 버퍼를 사용해서 데이터를 모았다가
								한번에 출력하는 개념...
				
				autoFlush
				==> 자동 Flush 기능을 사용할 지 여부를 판단하는 속성
					생략하면 true 가 지정되어서 자동 Flush 기능이 적용된다.
					
					예 ]
						
						<%@ page autoFlush="true" %>
						
					참고 ]
						
						만약 false 로 지정하면
						강제로 반드시 Flush 시켜줘야한다.
						
				isThreadSafe
				==> 스레드 처리를 할 때 동기화 처리 여부를 정하는 속성
					생략하면 자동 동기화 처리를 하도록 한다.
					
					예 ]
					
						<%@ page isThreadSafe="true" %>
						
					참고 ]
						
						JSP 의 모든 문서는 자동 스레드 처리가 된다.
						즉, 여러 클라이언트가 동시에 접속을 하더라도
						스레드 처리를 해서 응답하도록 되어있다.

				*
				info
				==> 주석문에 해당하는 것으로
					실행에는 아무런 상관이 없고
					다만 문서에 대한 정보(주석)을 달고 싶을 때 사용하는 속성
					
					예 ]
					
						<%@ page info="pink프로젝트 jsp 파일" %>
				*
				errorPage
				==> JSP 문서를 실행하는 도중 문제(Exception) 이 발생하면
					그 문서로 응답할 수 없게 된다.
					따라서 대신 응답할 다른 문서를 지정하는 속성
					
					예 ]
						
						<%@ page errorPage="pinkError.jsp" %>
						==> 에러가 발생하면 이 문서 대신 pinkError.jsp 로
							클라이언트에게 응답하세요. 라는 의미.
				*
				isErrorPage
				==> 지금 만들고 있는 문서가 에러 페이지용 문서인지를 지정하는 속성
				
					예 ]
						
						<%@ page isErrorPage="true" %>
						
				**
				contentType
				==> 실행 결과의 응답 방식을 지정하는 속성
					
					참고 ]
						
						실행결과 탄생하는 문서의 종류를 지정할 수 있다.
						이 때 응답 문서의 종류는 MIME TYPE 으로 지정해야 한다.
						
					예 ]
						
						<%@ page contentType="text/html" %>
						==> 응답 문서의 종류를 html 문서로 만들어주세요.
						
					참고 ]
					
						이 속성에는 인코딩 방식도 같이 지정할 수 있다.
						
						형식]
						
							<%@ page contentType="mimeType; charset="UTF-8" %>
							
					참고 ]
						
						이 속성은 매우 중요한 속성으로
						생략하면 일반 txt 파일로 응답하게 된다.
						따라서 거의 반드시 지정해야 하는 유일한 속성이다.
						
				*
				pageEncoding
				==> 문섣의 인코딩 방식을 지정하는 속성
				
					예 ]
						
						<%@ page pageEncoding="UTF-8" %>
						
					참고 ]
						contentType 에서 문서의 인코딩 방식을 같이 지정할 수 있으므로
						생략해도 무방하다.

	2. include
		==> 다른 문서를 현재 파일에 포함시키는 기능을 가진 지시어
			따라서 하나의 파일로 만드는 기능
			
		형식 ]
			<%@ include file="합칠파일이름" %>
			
		참고 ]
			우리가 웹 문서를 만들다 보면 여러페이지에 같은 내용이
			중복되어서 추가되는 경우가 많이 있다.
			
			하지만 원칙적으로 JSP 문서가 만든 결과를 응답하기 때문에
			(응답 문서는 하나로 만들어져야 한다.)
			매 문서마다 동일한 내용이라도 다시 작성해야 한다.
			
			이런 불편함을 덜기 위한 방법으로 제시된 지시어...
			
		결론적으로
			자주 사용하는 내용은 따로 만들어 놓고
			응답 문서에 따로 만들어진 파일을 합쳐서 하나의 문서로 만드는 방법
			
		**
		이 작업은 먼저 코드를 합치고 (하나의 문서로 만들고) 컴파일 한다.
		만약 먼저 합쳤을 때 문제가 발생하면(충돌이 나면)
		에러가 발생하게 된다.
		
=====================================================================================

JSP 코드 작성(스크립트) 방식
==> JSP 는 HTML 언어가 기본이 되고
	필요하면 자바 언어를 필요한 위치에 삽입하여 같이 실행하는 문서이다.
	
	참고 ]
		jsp 문서 실행 순서
			
			요청 --> 자바 class 파일로 변환 --> 컴파일(.class) --> 톰캣이 실행
			
			--> 실행 결과 만들어진 HTML 소스코드 를 클라이언트에게 전송

	이처럼 다른 언어에 포함하여 처리하는 방식을
	스크립트 방식이라고 하며
	JSP 문서에 자바 언어를 삽입하는 방식은 3가지가 있다.

	1. 스크립트 릿 방식
		==> 일반적인 자바 언어를 포함하는 방식을 의미한다.
			이 곳에 기록한 모든 내용은 service 함수 내에 포함된다.
			따라서 이곳은 결국 지역적인 역할을 하게 된다.
			
		참고 ]
			JSP 문서는 여러 문서가 같이 실행되는 것이 아니고
			클라이언트가 요청한 문서 하나만 실행되므로
			클래스가 연결되어서 실행되는 경우는 거의 없다.
			따라서 main 함수만 있으면 충분히 그 역할을 수행할 수 있게 된다.
			
		참고 ]
			JSP 문서는 실행을 하면 먼저 자바 클래스로 변환하고
			그것을 실행하는 방식이다.
			이런 클래스를 우리는 서블릿 클래스라고 부른다.
			이 때 이것 역시 자바의 main 함수처럼 시작함수가 존재하는데
			그 함수 이름이 service 함수 이다.
			
		형식 ]
			<%
				자바 코딩...
			%>
			
		참고 ]
			스크립트 릿 속에 있는 내용과 HTML 적힌 내용은
			같이 service 함수에 코딩이 된다.
			따라서 두가지는 혼용해서 사용할 수 있다.
			다만, 자바적인 요소와 HTML 요소만 구분해주면 된다.
			
	2. 선언자 방식
	
	3. 표현자 방식






